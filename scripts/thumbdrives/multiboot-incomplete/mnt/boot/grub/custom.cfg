# path to the partition holding ISO images via UUID
#set ext4part="5a271c1b-cc19-4b93-b0be-63c24be864fd"
#
#set ext4isopath="/dev/disk/by-uuid/$ext4part"
#
#insmod search_fs_uuid
#search --no-floppy --set=isopart --fs-uuid $ext4part

# later use inside each menuentry

#menuentry "Alpine standard 3.20.3 x86_64" {
#	set isofile=alpine-standard-3.20.3-x86_64.iso
#	loopback loop ($isopart)$isofile
#	# fixme paths
#	linux (loop)/isolinux/vmlinuz iso-scan/filename=($isopart)$isofile
#	initrd (loop)/isolinuxinitrd.img
#}

# Partition holding files
probe -u $root --set=rootuuid
#set imgdevpath="/dev/disk/by-uuid/$rootuuid"
set imgdevpath="/dev/disk/by-uuid/5a271c1b-cc19-4b93-b0be-63c24be864fd"
export imgdevpath rootuuid

# Custom variables
search --no-floppy --set=isofs --fs-uuid "5a271c1b-cc19-4b93-b0be-63c24be864fd"
set isopath="($isofs)"
#set isopath="/boot/iso-fat32"
export isopath
#echo "isopath is $isopath"
#sleep 10

# Load modules

insmod regexp
insmod all_video
insmod ext2

# MultiBoot USB menu
#submenu "Multiboot ->" {
#  # Warning for 32-bit systems
#  if ! cpuid -l; then
#    clear
#    echo "This is a 32-bit computer."
#    echo "You won't get to use 64-bit software on it."
#    echo
#    echo -n "To continue, press ESC or wait 10 seconds... "
#    sleep --interruptible 10
#    echo
#    echo
#  fi
#
#  # Load custom configuration
#  #if [ -e "$prefix/mbusb.cfg.local" ]; then
#  #  source "$prefix/mbusb.cfg.local"
#  #fi
#
#  # Load configuration files
#  echo -n "Loading configuration files... "
#
#  #for cfgfile in $prefix/mbusb.d/*.d/*.cfg; do
#  #  source "$cfgfile"
#  #done
#}

# loopback wrapper
function _loopback {
  loop="$1"
  path="$2"
  if [ -e ($loop) ]; then
    loopback -d $loop
  fi
  loopback "$loop" "$path"
}


#mbusb.d/alpine.d
#generic.cfg
# https://www.alpinelinux.org/posts/Alpine-3.7.0-released.html
# https://wiki.alpinelinux.org/wiki/Create_A_VirtualBox_Guest_with_Grub_and_XFS
# https://wiki.alpinelinux.org/wiki/Install_to_disk

for isofile in $isopath/alpine-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname ".*" "$isofile"
	echo "isoname=$isoname isofile=$isofile 2=$2"
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      #_loopback loop "$iso_path"
      menuentry "Alpine Linux" {
		search --no-floppy --set=isopart --fs-uuid 5a271c1b-cc19-4b93-b0be-63c24be864fd
		echo "isopart=$isopart"
		#insmod part_gpt
		#insmod chain
		#insmod ext2
		#set root=($isopart)
		#linux (root)/efi/boot/bootx64.efi
		echo "isofs=$isofs"
		echo "$iso_path"
		loopback loop2 $iso_path
		echo "b"
		echo $prefix
        linux16 $prefix/memdisk iso raw vmalloc=1000M
		linux16 (loop2)/boot/vmlinuz-lts modules=loop,squashfs,sd-mod,usb-storage
		echo "c"
		echo "$iso_path"
		initrd16 $iso_path #(loop2)/boot/initramfs-lts
		echo "we made it here"
		sleep 10
        
		#bootoptions="modules=loop,squashfs,sd-mod,usb-storage quiet nomodeset" #root=UUID=$rootuuid modloop=/boot/modloop-hardened alpine_dev=usbdisk:vfat 
        #linux (loop)/boot/vmlinuz-lts $bootoptions
        #initrd (loop)/boot/initramfs-lts
        #linux16 $prefix/memdisk iso raw vmalloc=1000M
        #initrd16 $iso_path
		echo "c"
      }
    }
  fi
done

#mbusb.d/archlinux.d
#generic64.cfg
for isofile in $isopath/archlinux-*-x86_64.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      _loopback loop "$iso_path"
      menuentry "Arch Linux (x86_64)" {
        bootoptions="img_dev=$imgdevpath img_loop=$iso_path earlymodules=loop"
        linux (loop)/arch/boot/x86_64/vmlinuz* $bootoptions
        initrd (loop)/arch/boot/x86_64/*.img
      }
    }
  fi
done

#mbusb.d/debian.d
#live10-generic.cfg
#for isofile in $isopath/debian-live-10*.iso; do
#  if [ -e "$isofile" ]; then
#    regexp --set=isoname "$isopath/(.*)" "$isofile"
#    submenu "$isoname (grub.cfg) ->" "$isofile" {
#      iso_path="$2"
#      export iso_path
#      search --set=root --file "$iso_path"
#      _loopback loop "$iso_path"
#      root=(loop)
#      configfile /boot/grub/grub.cfg
#      loopback --delete loop
#    }
#  fi
#done
#live8-generic64.cfg
#for isofile in $isopath/debian-live-8*-amd64-*.iso; do
#  if [ -e "$isofile" ]; then
#    regexp --set=isoname "$isopath/(.*)" "$isofile"
#    submenu "$isoname ->" "$isofile" {
#      iso_path="$2"
#      _loopback loop "$iso_path"
#      menuentry "Live (amd64)" {
#        bootoptions="findiso=$iso_path boot=live components quiet splash"
#        linux (loop)/live/vmlinuz $bootoptions
#        initrd (loop)/live/initrd.img
#      }
#      menuentry "Live (amd64 failsafe)" {
#        bootoptions="findiso=$iso_path boot=live components memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash vga=normal"
#        linux (loop)/live/vmlinuz $bootoptions
#        initrd (loop)/live/initrd.img
#      }
#    }
#  fi
#done
#live9-generic.cfg
#for isofile in $isopath/debian-live-9*.iso; do
#  if [ -e "$isofile" ]; then
#    regexp --set=isoname "$isopath/(.*)" "$isofile"
#    submenu "$isoname (grub.cfg) ->" "$isofile" {
#      iso_path="$2"
#      export iso_path
#      search --set=root --file "$iso_path"
#      _loopback loop "$iso_path"
#      root=(loop)
#      configfile /boot/grub/grub.cfg
#      loopback --delete loop
#    }
#  fi
#done

#mbusb.d/freebsd.d
#generic64.cfg
for isofile in $isopath/FreeBSD-*-amd64-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      _loopback loop "$iso_path"
      menuentry "FreeBSD (x86_64)" {
        bootoptions="$iso_path type=mfs_root"
        kfreebsd (loop)/boot/kernel/kernel
        kfreebsd_module $bootoptions
        set kFreeBSD.vfs.root.mountfrom=cd9660:/dev/md0
        set kFreeBSD.vfs.root.mountfrom.options=ro
        set kFreeBSD.grub.platform=$grub_platform
      }
    }
  fi
done

#mbusb.d/gentoo.d
#generic.cfg
for isofile in $isopath/gentoo-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    # Skip Live ISOs
    if regexp "live" "$isofile"; then continue; fi
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      _loopback loop "$iso_path"
      menuentry "gentoo" {
        bootoptions="isoboot=$iso_path root=/dev/ram0 init=/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot vga=791"
        linux (loop)/boot/gentoo $bootoptions
        initrd (loop)/boot/gentoo.igz
      }
      menuentry "gentoo-nofb" {
        bootoptions="isoboot=$iso_path root=/dev/ram0 init=/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot"
        linux (loop)/boot/gentoo $bootoptions
        initrd (loop)/boot/gentoo.igz
      }
    }
  fi
done

#mbusb.d/kali.d
#generic.cfg
for isofile in $isopath/kali-linux-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      _loopback loop "$iso_path"
      menuentry "Live" {
        bootoptions="findiso=$iso_path boot=live components splash username=root hostname=kali"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Live (failsafe)" {
        bootoptions="findiso=$iso_path boot=live components username=root hostname=kali memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash vga=normal"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Live (forensic mode)" {
        bootoptions="findiso=$iso_path boot=live components splash username=root hostname=kali noswap noautomount"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Live USB Persistence (check kali.org/prst)" {
        bootoptions="findiso=$iso_path boot=live noconfig=sudo username=root hostname=kali persistence"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Live USB Encrypted Persistence (check kali.org/prst)" {
        bootoptions="findiso=$iso_path boot=live persistent=cryptsetup persistence-encryption=luks noconfig=sudo username=root hostname=kali persistence"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
    }
  fi
done

#mbusb.d/openbsd.d
#install-generic.cfg
for isofile in $isopath/openbsd-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      _loopback loop "$iso_path"
      menuentry "Install OpenBSD" {
        bootoptions=""
        kopenbsd (loop)/*/*/bsd.rd $bootoptions
      }
    }
  fi
done

#mbusb.d/parrot.d
#live-generic.cfg
for isofile in $isopath/Parrot-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    # Skip netboot ISOs
    if regexp "mini" "$isofile"; then continue; fi
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      _loopback loop "$iso_path"
      menuentry "Live" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Text" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount systemd.unit=multi-user.target"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "RAM mode" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount toram"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Forensics mode" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount noswap noautomount"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Persistence" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount persistence"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Encrypted persistence" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount persistent=cryptsetup persistence-encryption=luks persistence"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Failsafe (nomodeset)" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount nomodeset"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Failsafe (disable nvdia/amd gpu)" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount nouveau.modeset=0 nvidia.modeset=0 radeon.modeset=0"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
      menuentry "Failsafe (strong errors prevention)" {
        bootoptions="findiso=$iso_path boot=live hostname=parrot splash noautomount config memtest noapic noapm nodma nomce nolapic nomodeset nosplash vga=normal"
        linux (loop)/live/vmlinuz $bootoptions
        initrd (loop)/live/initrd.img
      }
    }
  fi
done

#mbusb.d/qubesos.d
#generic64.cfg
for isofile in $isopath/Qubes-*x86_64.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    submenu "$isoname ->" "$isofile" {
      iso_path="$2"
      _loopback loop "$iso_path"
      probe --label --set=cd_label (loop)
      menuentry "Install Qubes" {
        bootoptions="iso-scan/filename=$iso_path inst.stage2=hd:LABEL=$cd_label i915.preliminary_hw_support=1 quiet rhgb"
        multiboot (loop)/isolinux/xen.gz
        module (loop)/isolinux/vmlinuz $bootoptions
        module (loop)/isolinux/initrd.img
      }
      menuentry "Test this media & install Qubes" {
        bootoptions="iso-scan/filename=$iso_path inst.stage2=hd:LABEL=$cd_label i915.preliminary_hw_support=1 quiet rhgb rd.live.check"
        multiboot (loop)/isolinux/xen.gz
        module (loop)/isolinux/vmlinuz $bootoptions
        module (loop)/isolinux/initrd.img
      }
      menuentry "Install Qubes in basic graphics mode" {
        bootoptions="iso-scan/filename=$iso_path inst.stage2=hd:LABEL=$cd_label xdriver=vesa nomodeset quiet"
        multiboot (loop)/isolinux/xen.gz
        module (loop)/isolinux/vmlinuz $bootoptions
        module (loop)/isolinux/initrd.img
      }
      menuentry "Rescue a Qubes system" {
        bootoptions="iso-scan/filename=$iso_path inst.stage2=hd:LABEL=$cd_label rescue quiet"
        multiboot (loop)/isolinux/xen.gz
        module (loop)/isolinux/vmlinuz $bootoptions
        module (loop)/isolinux/initrd.img
      }
    }
  fi
done


#mbusb.d/ubuntu.d
#desktop-generic.cfg
for isofile in $isopath/ubuntu-*-desktop-*.iso; do
  if [ -e "$isofile" ]; then
    regexp --set=isoname "$isopath/(.*)" "$isofile"
    submenu "$isoname (loopback.cfg) ->" "$isofile" {
      iso_path="$2"
      export iso_path
      search --set=root --file "$iso_path"
      _loopback loop "$iso_path"
      root=(loop)
      configfile /boot/grub/loopback.cfg
      loopback --delete loop
    }
  fi
done
